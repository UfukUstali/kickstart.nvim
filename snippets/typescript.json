{
  "callback": {
    "prefix": "callback",
    "body": ["${1:map}((${2:arg}) => {", "${3:body}", "})"]
  },
  "import": {
    "prefix": "import",
    "body": "import { ${2} } from \"${1:module}\";"
  },
  "import:default": {
    "prefix": "import:default",
    "body": "import ${2} from \"${1:module}\";"
  },
  "import:db": {
    "prefix": "import:db",
    "body": [
      "import {} from \"drizzle-orm\"",
      "",
      "import db from \"db/db\";",
      "import { ${2} } from \"db/schema\";"
    ]
  },
  "nitro:handler": {
    "prefix": "nitro:handler",
    "body": [
      "export default defineEventHandler(async (event) => {",
      "  ${1}",
      "});"
    ]
  },
  "nitro:body": {
    "prefix": "nitro:body",
    "body": [
      "const body = await readValidatedBody(event,",
      "  z.object({",
      "    ${1:zod}",
      "  }).safeParse",
      ");",
      "if (!body.success) {",
      "  throw createError({ status: 400 });",
      "}"
    ]
  },
  "nitro:query": {
    "prefix": "nitro:query",
    "body": [
      "const query = await getValidatedQuery(event,",
      "  z.object({",
      "    ${1:zod}",
      "  }).safeParse",
      ");",
      "if (!query.success) {",
      "  throw createError({ status: 400 });",
      "}"
    ]
  },
  "nitro:auth": {
    "prefix": "nitro:auth",
    "body": [
      "const authCtx = await auth.authenticate(event);",
      "if (!authCtx) {",
      "  throw createError({ status: 401 });",
      "}"
    ]
  },
  "nitro:error": {
    "prefix": "nitro:error",
    "body": ["throw createError({", "  status: ${1:code}", "});"]
  },
  "drizzle:mysqlTable": {
    "prefix": "drizzle:mysqlTable",
    "body": [
      "export const ${1} = mysqlTable(",
      "  \"${2}\",",
      "  {",
      "    id: serial(\"id\").notNull(),",
      "  },",
      "  (table) => {",
      "    return [primaryKey({ columns: [table.id] })${3}];",
      "  },",
      ");"
    ]
  }
}
